We first get the buggy version of coreutils
wget
http://web.cs.ucla.edu/classes/fall17/cs35L/assign/coreutils-with-bug.tar.gz

We unzip the coreutils and move into the directory
tar -xzvf coreutils-with-bug.tar.gz
cd coreutils-with-bug

We need to install coreutils into a local directory.  Make a directory to
install buggy coreutils
mkdir ~/CS35L/Lab4/coreutils

Then we run the configure command to set the install directory.
./configure --prefix=/u/cs/ugrad/chuen/coreutils-with-bug

Then we run make to attempt to compile and install the coreutils.
make

We run into a bug where a functions was named twice, since C doesn't support
operator overloading

In file included from utimecmp.c:41:0:
utimens.h:2:5: error: conflicting types for 'futimens'
 int futimens (int, char const *, struct timespec const [2]);
     ^~~~~~~~
In file included from utimecmp.h:25:0,
                 from utimecmp.c:25:
/usr/include/sys/stat.h:373:12: note: previous declaration of 'futimens' was here
 extern int futimens (int __fd, const struct timespec __times[2]) __THROW;
            ^~~~~~~~
make[3]: *** [Makefile:659: utimecmp.o] Error 1
make[3]: Leaving directory '/w/home.11/cs/ugrad/chuen/CS35L/Lab4/coreutils-with-bug/lib'
make[2]: *** [Makefile:414: all] Error 2
make[2]: Leaving directory '/w/home.11/cs/ugrad/chuen/CS35L/Lab4/coreutils-with-bug/lib'
make[1]: *** [Makefile:419: all-recursive] Error 1
make[1]: Leaving directory '/w/home.11/cs/ugrad/chuen/CS35L/Lab4/coreutils-with-bug'
make: *** [Makefile:357: all] Error 2

We need to get the coreutils.diff patch to fix the coreutils
wget http://web.cs.ucla.edu/classes/fall17/cs35L/assign/coreutils.diff

The coreutils.diff have a tilde(~) at the end of the old file names, which we 
don't have in our files.  Edit the coreutils.diff file to get rid of them. 
After that, we use patch to patch the files.

patch -p0 < coreutils.diff
patching file lib/utimens.c
patching file lib/utimens.h
patching file src/copy.c
patching file src/tee.c
patching file src/touch.c

After that, we can run compile and install the coreutils.
make
make install

Next, we want to reproduce the problem with ls from timestamps long ago.  I
copied the script from the webpage into test_time.sh 

#!/bin/bash
tmp=$(mktemp -d)
cd $tmp
touch -d '1918-11-11 11:00 GMT' wwi-armistice
touch now
sleep 1
touch now1
TZ=UTC0 ~/CS35L/Lab4/coreutils/bin/ls -lt --full-time wwi-armistice now now1
cd
rm -fr $tmp
exit 0

-rw-r--r-- 1 chuen csugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice
-rw-r--r-- 1 chuen csugrad 0 2017-10-23 18:13:44.765075415 +0000 now1
-rw-r--r-- 1 chuen csugrad 0 2017-10-23 18:13:43.763058966 +0000 now

We now want to load the buggy ls into gdb and debug it.  We manually run the
following commands
tmp=$(mktemp -d)
cd $tmp
touch -d '1918-11-11 11:00 GMT' wwi-armistice
touch now
touch now1

Then we load into gdb
gdb ~/CS35L/Lab4/coreutils/bin/ls
(gcb) info functions

We get a whole list of functions that ls uses.  We should look at the functions
within ls.c first.  ls -lt displays modification time stamp, so we are looking
for functions that modify that, or in C terms, mtime.  There are four functions
that deal with mtime:
static int compare_mtime(V, V);
static int compstr_mtime(V, V);
static int rev_cmp_mtime(V, V);
static int rev_str_mtime(V, V);

We should look at compare_mtime first, since it seems to compare two time
stamps.
(gdb) break compare_mtime
(gdb) break rev_cmp_mtime

Then we run the program and try to debug it.
(gdb) r -lt --full-time wwi-armistice now now1
Starting program: /w/home.11/cs/ugrad/chuen/CS35L/Lab4/coreutils/bin/ls -lt
--full-time wwi-armistice now now1

Breakpoint 1, compare_mtime (a=0x617180, b=0x617230) at ls.c:2884
2884    static int compare_mtime (V a, V b) { return cmp_mtime (a, b, xstrcoll);
}
(gdb) s
cmp_mtime (cmp=0x4045f0 <xstrcoll>, b=0x617230, a=0x617180) at ls.c:2884
2884    static int compare_mtime (V a, V b) { return cmp_mtime (a, b, xstrcoll);
}
(gdb) s
timespec_cmp (b=..., a=...) at ../lib/timespec.h:48
48        int diff = a.tv_sec - b.tv_sec;
(gdb) s
49        return diff ? diff : a.tv_nsec - b.tv_nsec;
(gdb) info locals
diff = 2
(gdb) s
compare_mtime (a=0x617180, b=0x617230) at ls.c:2884
2884    static int compare_mtime (V a, V b) { return cmp_mtime (a, b, xstrcoll);
}
(gdb) s
0x00007ffff7a4fad3 in msort_with_tmp.part () from /lib64/libc.so.6
(gdb) s
Single stepping until exit from function msort_with_tmp.part.0,
which has no line number information.
0x00007ffff7aa6990 in __memcpy_sse2 () from /lib64/libc.so.6
(gdb) s
Single stepping until exit from function __memcpy_sse2,
which has no line number information.
0x00007ffff7a4fa48 in msort_with_tmp.part () from /lib64/libc.so.6
(gdb) s
Single stepping until exit from function msort_with_tmp.part.0,
which has no line number information.

Breakpoint 1, compare_mtime (a=0x6170d0, b=0x617230) at ls.c:2884
2884    static int compare_mtime (V a, V b) { return cmp_mtime (a, b, xstrcoll);
}
(gdb) s
cmp_mtime (cmp=0x4045f0 <xstrcoll>, b=0x617230, a=0x6170d0) at ls.c:2884
2884    static int compare_mtime (V a, V b) { return cmp_mtime (a, b, xstrcoll);
}
(gdb) s
timespec_cmp (b=..., a=...) at ../lib/timespec.h:48
48        int diff = a.tv_sec - b.tv_sec;
(gdb) s
49        return diff ? diff : a.tv_nsec - b.tv_nsec;
(gdb) info locals
diff = -1171990703
(gdb) s
compare_mtime (a=0x6170d0, b=0x617230) at ls.c:2884
2884    static int compare_mtime (V a, V b) { return cmp_mtime (a, b, xstrcoll);
}
(gdb) s
0x00007ffff7a4fad3 in msort_with_tmp.part () from /lib64/libc.so.6
(gdb) c
Continuing.
-rw-r--r-- 1 chuen csugrad 0 1918-11-11 03:00:00.000000000 -0800 wwi-armistice
-rw-r--r-- 1 chuen csugrad 0 2017-10-27 17:29:53.944737137 -0700 now1
-rw-r--r-- 1 chuen csugrad 0 2017-10-27 17:29:51.094690033 -0700 now
[Inferior 1 (process 33496) exited normally]

That was a big dump of gbb commands, but basically we stepped through the
commands and looked at variables until we were past the compare functions.  We
hit two breakpoints, and saw the the variable diff was used twice, so we compare
that variable first.

The second diff = -1171990703, probably when it was comparing the time between
the old wwi file and a modern file.  The first diff = 2, which is the number
of seconds between the now and now1 files.  So subtraction must have caused a
stack overflow, causing it to become a negative number.  Now we know what to
fix.

We copy the timespec.h file from coreutils-with-bug/lib into our working 
directory to make an edit. We want this file because the second time comparison 
happened at line 48 of that file, which we saw using gdb.

cd ~/CS35L/Lab4
cp coreutils-with-bug/lib/timespec.h ./

We edit the file to get rid of subtraction and use manual if statements to
compare instead. (More inelegant, but safer).  The patch is below.

--- lib/timespec.h      2005-09-21 23:05:39.000000000 -0700
+++ lib/timespec.h      2017-10-27 20:54:50.555779000 -0700
@@ -45,8 +45,13 @@
 static inline int
 timespec_cmp (struct timespec a, struct timespec b)
 {
-  int diff = a.tv_sec - b.tv_sec;
-  return diff ? diff : a.tv_nsec - b.tv_nsec;
+  if (a.tv_sec < b.tv_sec) {
+    return -1;
+  } else if (a.tv_sec > b.tv_sec) {
+      return 1;
+  } else {
+      return 0;
+  }
 }

 # if ! HAVE_DECL_NANOSLEEP

 With this patchfile we patch the corrected files.
 patch -p0 < patch.diff
 make

We don't make install because we want to keep both a buggy version of ls and
corrected ls. We can now test out the new ls.  The output is below, using the
same script as above, except we changed the location of ls to be under 
~/CS35L/Lab4/coreutils-with-bug/src/ls. It can be seen that the order is 
correct.

-rw-r--r-- 1 chuen csugrad 0 2017-10-28 04:10:49.861163049 +0000 now1
-rw-r--r-- 1 chuen csugrad 0 2017-10-28 04:10:48.858146438 +0000 now
-rw-r--r-- 1 chuen csugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice


Lastly, we test the standard SEASnet utilities. We find that the output is 
in the right order, but the time stamp is labeled too far into the future.
cd ~
touch -d '1918-11-11 11:00 GMT' wwi-armistice
touch now
touch now1
ls -lt wwi-armistice now now1

-rw-r--r-- 1 chuen csugrad 0 2054-12-17 17:28:16.000000000 +0000 wwi-armistice
-rw-r--r-- 1 chuen csugrad 0 2017-10-28 04:50:25.957838000 +0000 now1
-rw-r--r-- 1 chuen csugrad 0 2017-10-28 04:50:23.813250000 +0000 now

The reason this happens is because the SEASnet file system doesn't take
advantage of the Linux 64 bit time stamp, instead only using an unsigned 32 bit
time stamp, starting from 1/1/1970, Unix time.  Because it is an unsigned
integer, it cannot represent numbers from the past(which are negative), and so
intreprets it as in the future.
